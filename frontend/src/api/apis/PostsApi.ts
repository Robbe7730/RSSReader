/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * This is a dynamic API generated by PostgREST
 *
 * The version of the OpenAPI document: 7.0.1 (UNKNOWN)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Posts,
    PostsFromJSON,
    PostsToJSON,
} from '../models';

export interface PostsDeleteRequest {
    id?: number;
    title?: string;
    description?: string;
    feedId?: number;
    link?: string;
    read?: boolean;
    prefer?: PostsDeletePreferEnum;
}

export interface PostsGetRequest {
    id?: number;
    title?: string;
    description?: string;
    feedId?: number;
    link?: string;
    read?: boolean;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: PostsGetPreferEnum;
}

export interface PostsPatchRequest {
    id?: number;
    title?: string;
    description?: string;
    feedId?: number;
    link?: string;
    read?: boolean;
    prefer?: PostsPatchPreferEnum;
    posts?: Posts;
}

export interface PostsPostRequest {
    select?: string;
    prefer?: PostsPostPreferEnum;
    posts?: Posts;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     */
    async postsDeleteRaw(requestParameters: PostsDeleteRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.link !== undefined) {
            queryParameters['link'] = requestParameters.link;
        }

        if (requestParameters.read !== undefined) {
            queryParameters['read'] = requestParameters.read;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/posts`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postsDelete(requestParameters: PostsDeleteRequest): Promise<void> {
        await this.postsDeleteRaw(requestParameters);
    }

    /**
     */
    async postsGetRaw(requestParameters: PostsGetRequest): Promise<runtime.ApiResponse<Array<Posts>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.link !== undefined) {
            queryParameters['link'] = requestParameters.link;
        }

        if (requestParameters.read !== undefined) {
            queryParameters['read'] = requestParameters.read;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.range !== undefined && requestParameters.range !== null) {
            headerParameters['Range'] = String(requestParameters.range);
        }

        if (requestParameters.rangeUnit !== undefined && requestParameters.rangeUnit !== null) {
            headerParameters['Range-Unit'] = String(requestParameters.rangeUnit);
        }

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostsFromJSON));
    }

    /**
     */
    async postsGet(requestParameters: PostsGetRequest): Promise<Array<Posts>> {
        const response = await this.postsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postsPatchRaw(requestParameters: PostsPatchRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.link !== undefined) {
            queryParameters['link'] = requestParameters.link;
        }

        if (requestParameters.read !== undefined) {
            queryParameters['read'] = requestParameters.read;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/posts`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PostsToJSON(requestParameters.posts),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postsPatch(requestParameters: PostsPatchRequest): Promise<void> {
        await this.postsPatchRaw(requestParameters);
    }

    /**
     */
    async postsPostRaw(requestParameters: PostsPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/posts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostsToJSON(requestParameters.posts),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postsPost(requestParameters: PostsPostRequest): Promise<void> {
        await this.postsPostRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum PostsDeletePreferEnum {
    Representation = 'return=representation',
    Minimal = 'return=minimal',
    None = 'return=none'
}
/**
    * @export
    * @enum {string}
    */
export enum PostsGetPreferEnum {
    Countnone = 'count=none'
}
/**
    * @export
    * @enum {string}
    */
export enum PostsPatchPreferEnum {
    Representation = 'return=representation',
    Minimal = 'return=minimal',
    None = 'return=none'
}
/**
    * @export
    * @enum {string}
    */
export enum PostsPostPreferEnum {
    Representation = 'return=representation',
    Minimal = 'return=minimal',
    None = 'return=none'
}
